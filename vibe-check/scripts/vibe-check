#!/usr/bin/env python3
"""vibe-check - Unified code review system CLI"""

import argparse
import json
import subprocess
import sys
import os
import time
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple

# ANSI color codes
RED, GREEN, YELLOW, BLUE, NC = '\033[0;31m', '\033[0;32m', '\033[1;33m', '\033[0;34m', '\033[0m'

def print_status(color: str, msg: str): print(f"{color}{msg}{NC}")

# Common source file extensions and language mapping
SOURCE_EXTS = {'js','jsx','ts','tsx','py','pyw','java','kt','kts','c','cpp','cc','cxx','h','hpp',
               'cs','go','rs','rb','php','swift','m','mm','scala','r','R','lua','pl','pm',
               'sh','bash','zsh','sql','vue','elm','ex','exs'}

LANG_MAP = {'js':'JavaScript','jsx':'JavaScript','ts':'TypeScript','tsx':'TypeScript',
            'py':'Python','pyw':'Python','java':'Java','kt':'Kotlin','kts':'Kotlin',
            'c':'C','h':'C','cpp':'C++','cc':'C++','cxx':'C++','hpp':'C++','cs':'C#',
            'go':'Go','rs':'Rust','rb':'Ruby','php':'PHP','swift':'Swift',
            'm':'Objective-C','mm':'Objective-C','scala':'Scala','r':'R','R':'R',
            'lua':'Lua','pl':'Perl','pm':'Perl','sh':'Shell','bash':'Shell','zsh':'Shell',
            'sql':'SQL','vue':'Vue','elm':'Elm','ex':'Elixir','exs':'Elixir'}

class VibeCheck:
    def __init__(self):
        self.vibe_dir = Path("vibe-check")
        self.master_file = self.vibe_dir / "reviews" / "_MASTER.json"
        self.inst_file = self.vibe_dir / "prompts" / "REVIEWER_INSTRUCTIONS.md"
        self.log_dir = self.vibe_dir / "logs"
    
    def check_setup(self):
        if not self.vibe_dir.exists():
            print_status(RED, "Error: vibe-check directory not found! Run setup first.")
            return False
        return True
    
    def load_master(self) -> Dict:
        with open(self.master_file, 'r') as f: return json.load(f)
    
    def save_master(self, data: Dict):
        with open(self.master_file, 'w') as f: json.dump(data, f, indent=2)
    
    def count_remaining(self) -> int:
        if not self.master_file.exists(): return 0
        data = self.load_master()
        return sum(1 for info in data['files'].values() if info['status'] in ['not_reviewed', 'in_progress'])
    
    def populate(self, no_git: bool = False) -> int:
        """Scan repository and populate file list"""
        if not self.check_setup(): return 1
        
        # Detect git
        use_git = False
        if not no_git:
            try:
                subprocess.run(['git', 'rev-parse', '--git-dir'], capture_output=True, check=True)
                use_git = True
                print_status(GREEN, "Git repository detected. Using git ls-files.")
            except: print_status(YELLOW, "Not a git repository. Using find.")
        
        # Get files
        files = []
        if use_git:
            result = subprocess.run(['git', 'ls-files'], capture_output=True, text=True)
            for line in result.stdout.strip().split('\n'):
                if line and not line.startswith(str(self.vibe_dir) + '/'):
                    files.append(Path(line))
        else:
            exclude = {'.git','node_modules','venv','env','__pycache__','build','dist','target','vendor','coverage',str(self.vibe_dir)}
            for p in Path('.').rglob('*'):
                if p.is_file() and not any(part.startswith('.') or part in exclude for part in p.parts):
                    files.append(p.relative_to('.'))
        
        # Build master data
        data = {
            "metadata": {
                "version": "1.0",
                "description": "Vibe-Check Master Review Ledger",
                "generated": datetime.utcnow().isoformat() + "Z",
                "total_files": 0, "total_loc": 0,
                "status_legend": {
                    "not_reviewed": "File has not been reviewed yet",
                    "in_progress": "Review is currently in progress",
                    "completed": "Review has been completed",
                    "needs_update": "Source file changed, review needs update"
                },
                "score_range": {"min": 1, "max": 5, "description": "1 = Critical issues, 5 = Excellent"}
            },
            "files": {}
        }
        
        print(f"\n{GREEN}Scanning for source files...{NC}")
        file_count = total_loc = 0
        
        for f in files:
            if f.suffix[1:] not in SOURCE_EXTS: continue
            
            try:
                with open(f, 'r', encoding='utf-8', errors='ignore') as file:
                    loc = sum(1 for _ in file)
            except: loc = 0
            
            file_count += 1
            total_loc += loc
            
            data["files"][str(f)] = {
                "language": LANG_MAP.get(f.suffix[1:], 'Unknown'),
                "loc": loc, "status": "not_reviewed",
                "review_date": None, "reviewer": None,
                "scores": {k: None for k in ["security","performance","maintainability","consistency","best_practices","code_smell"]},
                "open_issues": 0, "dependency_count": 0
            }
            
            if file_count % 10 == 0: print(f"\rProcessed {file_count} files...", end='', flush=True)
        
        data["metadata"]["total_files"] = file_count
        data["metadata"]["total_loc"] = total_loc
        
        self.save_master(data)
        print(f"\n{GREEN}✓ Master list populated!{NC}")
        print(f"  Files: {YELLOW}{file_count}{NC}, LOC: {YELLOW}{total_loc}{NC}")
        return 0
    
    def review(self) -> int:
        """Review a single file"""
        if not self.check_setup(): return 1
        
        # Check prerequisites
        try: subprocess.run(["claude", "--version"], capture_output=True, check=True)
        except:
            print_status(RED, "Error: Claude CLI not found! Install: npm install -g @anthropic-ai/claude-code")
            return 1
        
        if os.environ.get("ANTHROPIC_API_KEY"):
            print_status(GREEN, "✓ Using API key")
        else:
            print_status(YELLOW, "No API key - using Claude subscription")
        
        if not self.inst_file.exists() or not self.master_file.exists():
            print_status(RED, "Missing files! Run populate first.")
            return 1
        
        # Find next file
        data = self.load_master()
        file_to_review = None
        
        for fp, info in data['files'].items():
            if info['status'] == 'in_progress':
                file_to_review = fp
                break
        
        if not file_to_review:
            for fp, info in data['files'].items():
                if info['status'] == 'not_reviewed':
                    file_to_review = fp
                    break
        
        if not file_to_review:
            print_status(GREEN, "All files reviewed!")
            return 0
        
        # Setup review
        self.log_dir.mkdir(exist_ok=True)
        log_file = self.log_dir / f"review_{datetime.now():%Y%m%d_%H%M%S}.log"
        remaining = self.count_remaining()
        
        print_status(BLUE, "=== Starting Review ===")
        print(f"{YELLOW}File: {file_to_review}\nRemaining: {remaining}\nLog: {log_file}{NC}\n")
        
        # Mark in progress
        if data['files'][file_to_review]['status'] != 'in_progress':
            data['files'][file_to_review]['status'] = 'in_progress'
            self.save_master(data)
            print_status(GREEN, f"✓ Marked {file_to_review} as in_progress")
        else:
            print_status(YELLOW, f"⚠ Resuming {file_to_review}")
        
        # Create prompt with scratchsheet
        with open(self.inst_file, 'r') as f: instructions = f.read()
        
        # Read scratchsheet if it exists
        scratchsheet_file = self.vibe_dir / "reviews" / "_SCRATCHSHEET.md"
        scratchsheet_content = ""
        if scratchsheet_file.exists():
            with open(scratchsheet_file, 'r') as f:
                scratchsheet_content = f"\n\n## Global Scratchsheet\nThe following patterns have been discovered across the codebase:\n\n{f.read()}"
        
        prompt = f"You have access to vibe-check/ directory.\n\nReview this file:\nFILE_PATH: {file_to_review}{scratchsheet_content}\n\n{instructions}"
        
        # Run Claude
        cmd = ['claude', '--print', prompt, '--output-format', 'stream-json', '--permission-mode', 'acceptEdits', '--verbose']
        print_status(BLUE, "Launching Claude...")
        print("-" * 40)
        
        with open(log_file, 'w') as log:
            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1)
            log_content = []
            
            for line in iter(proc.stdout.readline, ''):
                log.write(line)
                log_content.append(line.strip())
                
                try:
                    d = json.loads(line.strip())
                    if d.get('type') == 'assistant':
                        for item in d.get('message', {}).get('content', []):
                            if item.get('type') == 'text' and (text := item.get('text', '').strip()):
                                print(f"{text}\n---")
                except: pass
            
            proc.wait()
        
        print("-" * 40)
        
        # Handle result
        if proc.returncode == 0:
            print_status(GREEN, "✓ Review completed!")
            data = self.load_master()
            data['files'][file_to_review]['status'] = 'completed'
            self.save_master(data)
            
            # Parse metrics
            for line in reversed(log_content):
                if '"type":"result"' in line or '"type": "result"' in line:
                    try:
                        r = json.loads(line)
                        print(f"\n{BLUE}=== Summary ==={NC}")
                        if (c := r.get('total_cost_usd')) != 'N/A': print(f"Cost: ${c:.4f}")
                        if (d := r.get('duration_ms')) != 'N/A': print(f"Duration: {d/1000:.1f}s")
                        if (t := r.get('num_turns')) != 'N/A': print(f"Turns: {t}")
                        break
                    except: pass
            
            print(f"\n{YELLOW}Remaining: {self.count_remaining()}{NC}")
            return 0
        else:
            print_status(RED, f"✗ Review failed! Check: {log_file}")
            data = self.load_master()
            data['files'][file_to_review]['status'] = 'not_reviewed'
            self.save_master(data)
            return 1
    
    def review_all(self, delay: int = 5) -> int:
        """Review all remaining files"""
        if not self.check_setup(): return 1
        
        print_status(BLUE, "=== Batch Review ===")
        reviewed = failed = 0
        
        while self.count_remaining() > 0:
            print(f"\n{YELLOW}Remaining: {self.count_remaining()}\nStarting #{reviewed + 1}...{NC}\n")
            
            if self.review() == 0:
                reviewed += 1
                print_status(GREEN, f"✓ Review #{reviewed} done")
            else:
                failed += 1
                print_status(RED, "✗ Failed! Stopping.")
                break
            
            if self.count_remaining() > 0:
                print(f"{YELLOW}Waiting {delay}s...{NC}")
                time.sleep(delay)
            print("\n" + "="*40)
        
        print(f"\n{BLUE}=== Summary ==={NC}")
        print(f"{GREEN}Reviewed: {reviewed}{NC}")
        if failed: print(f"{RED}Failed: {failed}{NC}")
        return 1 if failed else 0
    
    def status(self) -> int:
        """Show review status"""
        if not self.check_setup() or not self.master_file.exists(): return 1
        
        data = self.load_master()
        files = data['files']
        total = len(files)
        
        counts = {}
        for info in files.values():
            s = info['status']
            counts[s] = counts.get(s, 0) + 1
        
        print(f"{BLUE}=== Vibe-Check Status ==={NC}\n")
        print(f"Total files: {YELLOW}{total}{NC}")
        print(f"Total LOC: {YELLOW}{data['metadata']['total_loc']}{NC}\n")
        
        for status, count in sorted(counts.items()):
            color = GREEN if status == 'completed' else YELLOW if status == 'in_progress' else RED
            print(f"{status:15} {color}{count:4d}{NC} ({count/total*100:5.1f}%)")
        
        if total > 0:
            done = counts.get('completed', 0)
            pct = done / total
            bar = '█' * int(40 * pct) + '░' * int(40 * (1-pct))
            print(f"\nProgress: [{GREEN}{bar}{NC}] {pct*100:.1f}%")
        
        return 0
    
    def synthesize(self, severity: str = 'medium', category: str = 'all', 
                   score_threshold: Optional[int] = None, critical_only: bool = False,
                   interactive: bool = True) -> int:
        """Synthesize individual reviews into actionable insights"""
        if not self.check_setup(): return 1
        
        # Check prerequisites
        try: subprocess.run(["claude", "--version"], capture_output=True, check=True)
        except:
            print_status(RED, "Error: Claude CLI not found! Install: npm install -g @anthropic-ai/claude-code")
            return 1
        
        if not self.master_file.exists():
            print_status(RED, "No reviews found! Run populate and review first.")
            return 1
        
        # Create synthesis directory structure
        synthesis_dir = self.vibe_dir / "synthesis"
        synthesis_dir.mkdir(exist_ok=True)
        (synthesis_dir / "priority-high").mkdir(exist_ok=True)
        (synthesis_dir / "priority-medium").mkdir(exist_ok=True)
        (synthesis_dir / "priority-low").mkdir(exist_ok=True)
        
        # Load completed reviews
        data = self.load_master()
        completed_files = {fp: info for fp, info in data['files'].items() 
                          if info['status'] == 'completed'}
        
        if not completed_files:
            print_status(RED, "No completed reviews found! Run reviews first.")
            return 1
        
        # Collect issues from review files
        issues = self._collect_issues(completed_files)
        
        if not issues:
            print_status(YELLOW, "No issues found in completed reviews.")
            return 0
        
        # Filter issues based on criteria
        filtered_issues = self._filter_issues(issues, severity, category, score_threshold, critical_only)
        
        # Interactive mode selection
        if interactive and len(issues) > 100:
            filtered_issues = self._interactive_selection(issues, filtered_issues)
        
        if not filtered_issues:
            print_status(YELLOW, f"No issues found matching criteria (severity: {severity}, category: {category})")
            return 0
        
        print_status(BLUE, f"Synthesizing {len(filtered_issues)} issues across {len(set(i['file'] for i in filtered_issues))} files...")
        
        # Process in chunks
        return self._process_synthesis_chunks(filtered_issues, severity)
    
    def _collect_issues(self, completed_files: Dict) -> List[Dict]:
        """Collect all issues from completed review files"""
        issues = []
        reviews_dir = self.vibe_dir / "reviews" / "modules"
        
        for file_path in completed_files.keys():
            # Handle nested directory structure
            review_file = reviews_dir / f"{file_path}.md"
            
            if review_file.exists():
                file_issues = self._parse_review_file(review_file, file_path)
                issues.extend(file_issues)
        return issues
    
    def _parse_review_file(self, review_file: Path, file_path: str) -> List[Dict]:
        """Parse a review markdown file and extract issues"""
        issues = []
        try:
            with open(review_file, 'r') as f:
                content = f.read()
            
            # Extract YAML frontmatter for scores
            scores = {}
            if content.startswith('---'):
                yaml_end = content.find('---', 3)
                if yaml_end > 0:
                    yaml_content = content[3:yaml_end]
                    # Parse scores (simplified)
                    for line in yaml_content.split('\n'):
                        if 'score:' in line and '{' in line:
                            # Handle format like "  security:        {score: 1, open_issues: 4}"
                            if ':' in line:
                                metric = line.split(':')[0].strip()
                                score_part = line.split('score:')[1].strip()
                                if score_part.startswith('{') or score_part[0].isdigit():
                                    try:
                                        # Extract just the score number
                                        score_str = score_part.split(',')[0].replace('{', '').strip()
                                        score = int(score_str)
                                        scores[metric] = score
                                    except (ValueError, IndexError):
                                        pass
            
            # Extract issues from markdown sections
            lines = content.split('\n')
            current_category = None
            
            for i, line in enumerate(lines):
                if line.startswith('## ') and 'Issues' in line:
                    current_category = line.replace('## ', '').replace(' Issues', '').lower()
                elif line.startswith('### ') and current_category:
                    # Found an issue
                    parts = line[4:].split(' - ', 1)
                    if len(parts) == 2:
                        # Extract severity, handling format like "1. HIGH" or "HIGH"
                        severity_part = parts[0].strip('[]').upper()
                        # Remove number prefix if present (e.g., "1. HIGH" -> "HIGH")
                        if '. ' in severity_part:
                            severity = severity_part.split('. ', 1)[1]
                        else:
                            severity = severity_part
                        title = parts[1]
                        
                        # Find location and description
                        location = description = recommendation = ""
                        for j in range(i+1, min(i+10, len(lines))):
                            if lines[j].startswith('- **Location**:'):
                                location = lines[j].replace('- **Location**:', '').strip()
                            elif lines[j].startswith('- **Description**:'):
                                description = lines[j].replace('- **Description**:', '').strip()
                            elif lines[j].startswith('- **Recommendation**:'):
                                recommendation = lines[j].replace('- **Recommendation**:', '').strip()
                            elif lines[j].startswith('##') or lines[j].startswith('###'):
                                break
                        
                        issue = {
                            'file': file_path,
                            'category': current_category,
                            'severity': severity,
                            'title': title,
                            'location': location,
                            'description': description,
                            'recommendation': recommendation,
                            'file_scores': scores
                        }
                        issues.append(issue)
        
        except Exception as e:
            print_status(YELLOW, f"Warning: Could not parse {review_file}: {e}")
        
        return issues
    
    def _filter_issues(self, issues: List[Dict], severity: str, category: str, 
                      score_threshold: Optional[int], critical_only: bool) -> List[Dict]:
        """Filter issues based on specified criteria"""
        filtered = issues.copy()
        
        # Filter by severity
        severity_levels = {
            'high': ['HIGH'],
            'medium': ['HIGH', 'MEDIUM'],
            'low': ['HIGH', 'MEDIUM', 'LOW']
        }
        if severity in severity_levels:
            filtered = [i for i in filtered if i['severity'] in severity_levels[severity]]
        
        # Filter by category
        if category != 'all':
            filtered = [i for i in filtered if i['category'] == category.lower()]
        
        # Filter by score threshold
        if score_threshold:
            filtered = [i for i in filtered if any(score and score < score_threshold 
                       for score in i['file_scores'].values())]
        
        # Filter critical files only
        if critical_only:
            filtered = [i for i in filtered if any(score and score <= 2 
                       for score in i['file_scores'].values())]
        
        return filtered
    
    def _interactive_selection(self, all_issues: List[Dict], filtered_issues: List[Dict]) -> List[Dict]:
        """Interactive selection when there are many issues"""
        total = len(all_issues)
        high_count = len([i for i in all_issues if i['severity'] == 'HIGH'])
        medium_count = len([i for i in all_issues if i['severity'] == 'MEDIUM'])
        low_count = len([i for i in all_issues if i['severity'] == 'LOW'])
        
        print(f"\n{BLUE}Found {total} total issues:{NC}")
        print(f"  - {high_count} HIGH severity issues")
        print(f"  - {medium_count} MEDIUM severity issues")
        print(f"  - {low_count} LOW severity issues")
        print(f"\nCurrent filter would process {len(filtered_issues)} issues.")
        print(f"\nSelect synthesis mode:")
        print(f"1. Quick (HIGH only) - ~{high_count} issues")
        print(f"2. Standard (HIGH + MEDIUM) - ~{high_count + medium_count} issues")
        print(f"3. Comprehensive (All) - ~{total} issues")
        print(f"4. Continue with current filter - {len(filtered_issues)} issues")
        
        while True:
            try:
                choice = input(f"\n{YELLOW}Choice (1-4): {NC}").strip()
                if choice == '1':
                    return self._filter_issues(all_issues, 'high', 'all', None, False)
                elif choice == '2':
                    return self._filter_issues(all_issues, 'medium', 'all', None, False)
                elif choice == '3':
                    return self._filter_issues(all_issues, 'low', 'all', None, False)
                elif choice == '4':
                    return filtered_issues
                else:
                    print("Please enter 1, 2, 3, or 4")
            except KeyboardInterrupt:
                print(f"\n{YELLOW}Cancelled.{NC}")
                return []
    
    def _process_synthesis_chunks(self, issues: List[Dict], severity: str) -> int:
        """Process issues in manageable chunks"""
        # Group issues by priority
        high_issues = [i for i in issues if i['severity'] == 'HIGH']
        medium_issues = [i for i in issues if i['severity'] == 'MEDIUM']
        low_issues = [i for i in issues if i['severity'] == 'LOW']
        
        chunks = []
        
        # Create chunks based on severity (smaller chunks for higher priority)
        if high_issues:
            chunks.extend(self._create_chunks(high_issues, 10, "Critical Issues"))
        if medium_issues:
            chunks.extend(self._create_chunks(medium_issues, 20, "Important Issues"))
        if low_issues:
            chunks.extend(self._create_chunks(low_issues, 30, "Other Issues"))
        
        if not chunks:
            print_status(YELLOW, "No issues to synthesize.")
            return 0
        
        print_status(BLUE, f"Processing {len(chunks)} chunks...")
        
        results = []
        for i, (chunk_issues, chunk_name) in enumerate(chunks, 1):
            print(f"\n{YELLOW}Processing chunk {i}/{len(chunks)}: {chunk_name} ({len(chunk_issues)} issues){NC}")
            
            result = self._synthesize_chunk(chunk_issues, chunk_name, i)
            if result:
                results.append(result)
        
        # Create final synthesis
        if results:
            self._create_final_synthesis(results, severity)
            print_status(GREEN, f"✓ Synthesis complete! Check vibe-check/synthesis/ directory")
            return 0
        else:
            print_status(RED, "✗ Synthesis failed")
            return 1
    
    def _create_chunks(self, issues: List[Dict], chunk_size: int, name: str) -> List[Tuple[List[Dict], str]]:
        """Split issues into chunks of specified size"""
        chunks = []
        for i in range(0, len(issues), chunk_size):
            chunk = issues[i:i+chunk_size]
            chunk_name = f"{name} {i//chunk_size + 1}" if len(issues) > chunk_size else name
            chunks.append((chunk, chunk_name))
        return chunks
    
    def _synthesize_chunk(self, issues: List[Dict], chunk_name: str, chunk_num: int) -> Optional[str]:
        """Synthesize a single chunk of issues"""
        # Create synthesis prompt
        prompt = self._create_synthesis_prompt(issues, chunk_name)
        
        # Set up logging
        self.log_dir.mkdir(exist_ok=True)
        log_file = self.log_dir / f"synthesis_{chunk_num}_{datetime.now():%Y%m%d_%H%M%S}.log"
        
        # Run Claude
        cmd = ['claude', '--print', prompt, '--output-format', 'stream-json', '--permission-mode', 'acceptEdits', '--verbose']
        
        try:
            with open(log_file, 'w') as log:
                proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True, bufsize=1)
                output_lines = []
                
                for line in iter(proc.stdout.readline, ''):
                    log.write(line)
                    try:
                        d = json.loads(line.strip())
                        if d.get('type') == 'assistant':
                            for item in d.get('message', {}).get('content', []):
                                if item.get('type') == 'text' and (text := item.get('text', '').strip()):
                                    output_lines.append(text)
                    except: pass
                
                proc.wait()
            
            if proc.returncode == 0:
                return '\n'.join(output_lines)
            else:
                print_status(RED, f"✗ Chunk {chunk_num} failed")
                return None
                
        except Exception as e:
            print_status(RED, f"✗ Error processing chunk {chunk_num}: {e}")
            return None
    
    def _create_synthesis_prompt(self, issues: List[Dict], chunk_name: str) -> str:
        """Create prompt for synthesizing a chunk of issues"""
        issues_text = ""
        
        # Group issues by category
        by_category = {}
        for issue in issues:
            cat = issue['category']
            if cat not in by_category:
                by_category[cat] = []
            by_category[cat].append(issue)
        
        for category, cat_issues in by_category.items():
            issues_text += f"\n## {category.title()} Issues\n"
            for issue in cat_issues:
                issues_text += f"\n### {issue['severity']} - {issue['title']}\n"
                issues_text += f"**File**: {issue['file']}\n"
                if issue['location']:
                    issues_text += f"**Location**: {issue['location']}\n"
                if issue['description']:
                    issues_text += f"**Description**: {issue['description']}\n"
                if issue['recommendation']:
                    issues_text += f"**Recommendation**: {issue['recommendation']}\n"
        
        return f"""You are analyzing code review findings to create actionable synthesis reports.

TASK: Synthesize the following {len(issues)} code review issues into actionable insights.

CHUNK: {chunk_name}

ISSUES TO ANALYZE:
{issues_text}

SYNTHESIS REQUIREMENTS:
1. **Cross-cutting patterns**: Identify issues that appear across multiple files
2. **Priority ranking**: Rank issues by business impact and fix effort  
3. **Root causes**: Look for underlying architectural or process issues
4. **Quick wins**: Identify high-impact, low-effort fixes
5. **Dependencies**: Note issues that must be fixed in order

OUTPUT FORMAT:
# {chunk_name} - Synthesis Report

## Executive Summary
[2-3 sentences summarizing the most critical findings]

## Priority Issues (Fix First)
[List 3-5 highest priority issues with business justification]

## Cross-cutting Patterns
[Issues appearing in multiple files - suggest systemic fixes]

## Quick Wins  
[High-impact, low-effort improvements]

## Root Cause Analysis
[Underlying issues causing multiple problems]

## Recommended Action Plan
[Prioritized steps for addressing these issues]

Keep the report concise and actionable. Focus on business impact over technical details."""
    
    def _create_final_synthesis(self, chunk_results: List[str], severity: str) -> None:
        """Create final synthesis combining all chunk results"""
        synthesis_dir = self.vibe_dir / "synthesis" / f"priority-{severity}"
        
        # Create executive summary
        exec_summary = synthesis_dir / "EXECUTIVE_SUMMARY.md"
        action_plan = synthesis_dir / "ACTION_PLAN.md"
        
        # Combine chunk results
        combined_content = "\n\n".join(chunk_results)
        
        # Create final synthesis prompt
        final_prompt = f"""You are creating a final executive synthesis of code review findings.

TASK: Create an executive summary and action plan from the following chunk syntheses.

CHUNK SYNTHESES:
{combined_content}

Create two outputs:

1. EXECUTIVE_SUMMARY.md - High-level overview for leadership
2. ACTION_PLAN.md - Prioritized implementation plan for developers

Focus on:
- Overall codebase health assessment
- Top 5 critical issues requiring immediate attention  
- Estimated effort/timeline for fixes
- Business risk assessment
- Long-term recommendations

Keep both documents concise and business-focused."""
        
        # For now, just create the synthesis files from the chunk results
        # The final synthesis with Claude can be added later
        with open(exec_summary, 'w') as f:
            f.write(f"# Executive Summary\n\nGenerated: {datetime.now()}\n\n")
            f.write("## Synthesis Results\n\n")
            f.write(combined_content)
        
        with open(action_plan, 'w') as f:
            f.write(f"# Action Plan\n\nGenerated: {datetime.now()}\n\n")
            f.write("## Prioritized Recommendations\n\n")
            f.write("Review the detailed synthesis below for actionable recommendations.\n\n")
            f.write(combined_content)
        
        # Update HOTSPOTS.md and METRICS_SUMMARY.md
        self._update_system_files()
    
    def _update_system_files(self) -> None:
        """Update HOTSPOTS.md and METRICS_SUMMARY.md with synthesis results"""
        # This is a placeholder - could be enhanced to automatically update system files
        # based on synthesis results
        hotspots_file = self.vibe_dir / "reviews" / "system" / "HOTSPOTS.md"
        metrics_file = self.vibe_dir / "reviews" / "system" / "METRICS_SUMMARY.md"
        
        # Add timestamp to show when synthesis was last run
        timestamp = f"\n\n*Last synthesis: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*\n"
        
        if hotspots_file.exists():
            with open(hotspots_file, 'a') as f:
                f.write(timestamp)
        
        if metrics_file.exists():
            with open(metrics_file, 'a') as f:
                f.write(timestamp)

def main():
    parser = argparse.ArgumentParser(description='Vibe-Check: AI code review', prog='vibe-check')
    sub = parser.add_subparsers(dest='cmd', help='Commands')
    
    p = sub.add_parser('populate', help='Scan and populate file list')
    p.add_argument('--no-git', action='store_true', help='Ignore git')
    
    sub.add_parser('review', help='Review single file')
    
    r = sub.add_parser('review-all', help='Review all files')
    r.add_argument('--delay', type=int, default=5, help='Delay between reviews')
    
    sub.add_parser('status', help='Show progress')
    
    # Synthesize command with options
    s = sub.add_parser('synthesize', help='Synthesize reviews into actionable insights')
    s.add_argument('--severity', choices=['high', 'medium', 'low'], default='medium',
                   help='Issue severity level (default: medium)')
    s.add_argument('--category', choices=['security', 'performance', 'maintainability', 
                   'consistency', 'best_practices', 'code_smell', 'all'], default='all',
                   help='Issue category filter (default: all)')
    s.add_argument('--score-threshold', type=int, metavar='N',
                   help='Only include files with scores < N')
    s.add_argument('--critical-only', action='store_true',
                   help='Only include critical files (scores <= 2)')
    s.add_argument('--no-interactive', action='store_true',
                   help='Skip interactive mode selection')
    
    args = parser.parse_args()
    if not args.cmd: parser.print_help(); return 1
    
    vc = VibeCheck()
    
    if args.cmd == 'populate': return vc.populate(args.no_git)
    elif args.cmd == 'review': return vc.review()
    elif args.cmd == 'review-all': return vc.review_all(args.delay)
    elif args.cmd == 'status': return vc.status()
    elif args.cmd == 'synthesize': 
        return vc.synthesize(
            severity=args.severity,
            category=args.category,
            score_threshold=args.score_threshold,
            critical_only=args.critical_only,
            interactive=not args.no_interactive
        )
    
    return 1

if __name__ == "__main__":
    sys.exit(main())